name: Python versions build test

on:
  push:
    branches: ["main", "dev"]
    paths: ["**.py", "requirements.txt"]
  pull_request:
    branches: ["main", "dev"]
    paths: ["**.py", "requirements.txt"]
  workflow_dispatch:

jobs:
  call-build-fasttree:
    uses: ./.github/workflows/build-fasttree.yml

  test_pythons:
    name: Build and test
    runs-on: ubuntu-latest
    needs: [call-build-fasttree]
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Cache FastTree
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/FastTree
          key: ${{ runner.os }}-FastTree

      - name: Export to PATH and verify
        run: |
          export PATH=$PATH:$HOME/.local/bin
          which FastTree

      - name: Run script
        id: run-tests
        run: pytest

      - name: Fail on py3.11
        run: |
          echo "Running tests on Python ${{ matrix.python-version }}"
          # Simulate a failure for demonstration purposes
          if [[ ${{ matrix.python }} == "3.11" ]]; then
            exit 1
          fi

      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: out
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.python }}
          outputs: |-
            status: 'success'

  conclude:
    runs-on: ubuntu-latest
    needs: [test_pythons]
    steps:
      - name: Read from build and test matrix
        id: read
        uses: cloudposse/github-action-matrix-outputs-read@v1
        with:
          matrix-step-name: out

      - name: Set job conclusion
        run: echo ${{ steps.read.outputs.result }}
